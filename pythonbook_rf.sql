-- phpMyAdmin SQL Dump
-- version 4.5.4.1deb2ubuntu2.1
-- http://www.phpmyadmin.net
--
-- Хост: localhost
-- Время создания: Окт 23 2021 г., 05:42
-- Версия сервера: 5.7.33-0ubuntu0.16.04.1
-- Версия PHP: 7.0.33-0ubuntu0.16.04.16

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `pythonbook.rf`
--

-- --------------------------------------------------------

--
-- Структура таблицы `articles`
--

CREATE TABLE `articles` (
  `id` int(11) NOT NULL,
  `name` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL,
  `text` text COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `articles`
--

INSERT INTO `articles` (`id`, `name`, `text`) VALUES
(1, 'Вывод данных', 'Для вывода данных в Python используется функция print(). «Print» в переводе с английского языка означает «печатать», соответственно мы печатаем информацию на экран устройства. В качестве аргументов функции могут выступать ^строки^, ^ч`исла^ и другие значения различных типов д`анных.\n\nПустая функция print() напечатает новую пустую строку.\n\nСтоит отметить, что все строки с вашим статичным текстом должны быть заключены кавычками с двух сторон. Только так Python и функция print() поймет, что задача состоит в том, чтобы вывести текст.\n\nВыводить м`ожно ^целые^, ^дробные^, ^комплексные числа^. Дробная часть отделяется точкой.\n\nЕсли же речь идет о числах, то данные такого типа можно выводить без кавычек. Здесь же можно производить различные ^вычисл`ения^, такие как ^сложение^, ^вычитание^, ^умножение^, ^деление^ и ^возведение в ст`епень^.\n\nЧерез print() также можно выводить значения переменных. Для этого названия переменных необходимо писать без кавычек.\n'),
(2, 'Ввод данных', 'Запрос данных от пользователя выполняет функция input(). Ее аргументом может быть ^строк`а^, ^например вопрос^, на который пользователь должен дать ответ.\n \nДанные, которые примет input() с клавиатуры, необходимо поместить в перем`енную.\n\nВажно запомнить, что input() всегда возвращает строку.\n\nДопустим, если нам необходимо ввести число с клавиатуры, и впоследствии вывести результат его умножения на 10, то нам нужно изменить тип данных той переменной, где хранится ответ на наш input(). Т. к. input() возвращает тип данных «строка», нам нужно поменять этот тип данных на «число». Делается это с помощью встроенной в Python функцией int(). В качестве аргумента для функции берется строка, где находятся только цифры. Нельзя превратить буквы или специальные символы в ч`исла. \n\nА для того, чтобы перевести число обратно в строку, используется функция {str}{Эстээр}().\n'),
(3, 'Переменные', 'Переменная — это ячейка памяти компьютера, в которой хранится информация.\n\nМестом хранения переменной является оперативная память ^устр`ойства^.\n\nВ переменные мы можем сохранять ^ч`исла^, ^строки^, результаты вычислений и значения других типов данных. Имена переменных могут быть написаны латинскими буквами (^на английском языке^), цифрами и нижними подчеркиваниями. Используйте осмысленное именование переменных.\n\nНазвания переменных не должны начинаться с цифр.\n\n^Наприм`ер^, ^создадим^ переменную и назовем ее «name». Ее значением возьмем строку «Александр». \n\nЧтобы связать между собой имя переменной и ее значение, используют оператор присваивания — обозначается он зн`аком «=».\n\nНазвание переменной пишется слева, потом ставится оператор присваивания, а затем значение переменной.\n\nЗначения переменных можно переприсв`оить. На то она и переменная —  в ней можно менять значения!\n'),
(4, 'Типы данных', 'В Python существует множество типов данных. Поговорим об основных.\n\n^int^ —  целые числа (сокращение от слова {integer}{интеджер}).\n\n^float^ —  дробные числа, где целая часть отделяется от дробной точкой.\n\n^complex^ —  компл`ексные числа.\n\nВсе строки имеют тип данных {str}{Эстээр} — сокращение от слова string (строка). Выделяются с двух сторон кавычками.\n\nПустой список создается с помощью функции list(). Список можно заполнить данными разного типа.\n\nМножество - это последовательность уникальных значений. Создать пустое множество можно с помощью функции set().\n\nСловари — это наборы данных ключ: значение. Создание пустого словаря происходит путем вызова функции dict(). Нужны тогда, когда обращения к значениям нужно производить, используя свои уникальные ключи.\n'),
(5, 'Условный оператор', 'Чтобы наша программа могла сделать выбор в зависимости от значения переменных или утверждений, используется условный оператор {«if»}{`иф} - «else».\n\nУтверждение – это ^выражение^, которое может быть истинным (^True^) или ложным (^False^).\n\nПополн`яем словарный запас:\n{if}{‘иф} — это «если»\nelse — это «иначе»\n\nОбратите внимание, что команды вкладываются в {if}{‘иф} и в else — ^делаются^ отступы вложенных команд в один {TAB}{ТАБ} или 4 пробела). {If}{‘иф} и else пишутся строго друг под другом.\n\nУсловный оператор - это ^оператор^, который в зависимости от истинности или ложности логического ^выражения^ выполняет те или иные действия.\n\nЕсли же нам нужно перебрать множество вариантов событий, то мы можем использовать {elif}{эл`иф} (сокращение от else {if}{‘иф}).\n\nОператоры сравнения:\n\n{==}{двойное равно} {—}{означает} равенство\n{!=}{^восклицательный знак^ ^равно^} {—}{означает}  неравенство\n{<}{}, {>}{} — меньше и больше\n{<=}{} меньше или равно\n{>=}{} больше или равно'),
(6, 'Циклы', 'Циклы бывают двух видов: с условием и с параметром.\n\nЦикл {«while»}{^В`айл^} позволяет повторять команды до тех ^пор^, как логическое выражение в нем перестанет быть истинным.\n\nЦикл ^«for»^ используется для перебора элементов последовательностей, например, списков или диапазона чисел.\n\nВ качестве последовательности элементов можно использовать ^строки^ или ^списки^.\n\nДля создания пустого списка используется функция {list()}{лист}.\n\nЧтобы добавить элемент в список, используется метод {.append()}{^апп`енд^}.\n\nДля удаления элемента - метод {.remove()}{^рем`ув^}.\n\nПеребрать последовательность чисел в цикле {«for»}{фор,} можно с помощью функции {range()}{^р`эйндж^}, где указывается начальное и конечное число переб`ора.\n\nПеребрать последовательность элементов в ^сп`иске^ можно с помощью конструкции «^for^ {item}{^`айтэм^} ^in^ {items}{^`айтэмс^}», где {«item»}{^`айтэм^} — перебираемое значение элемента, а {«items»}{^`айтэмс^} — список всех элементов.\n\n\n'),
(7, 'Функции', 'Функция — это ^алгоритм^, названный каким-либо именем. В функцию записывают фрагмент кода, который может вызываться многократно в основной программе.\n\nНачнем с функций, которые не возвращают значения.\n\nПримером такой функции является print(). Результатом ее выполнения является вывод текста на экран, а сама функция возвращает «None».\n\nДля создания функции используется ключевое слово {«def»}{дэф}. Затем пишется название функции, далее открываются скобки с перечислением необходимых входных параметров.\n\nДля того чтобы мы могли в дальнейшем использовать результат работы функции в нашей программе, нам необходимо возвращать значение из функции.\n\nРезультаты таких функций можно сохранять в переменные, ^например^, ^input()^, ^int()^, {str()}{^эстэ`эр^}.\n\nЧтобы вернуть значение из функции используется ключевое слово {«return»}{рет`ёрн} — «вернуть».\n');

-- --------------------------------------------------------

--
-- Структура таблицы `questions`
--

CREATE TABLE `questions` (
  `id` int(11) NOT NULL,
  `question` varchar(256) NOT NULL,
  `theme` varchar(64) NOT NULL,
  `option1` varchar(128) NOT NULL,
  `option2` varchar(128) NOT NULL,
  `option3` varchar(128) NOT NULL,
  `option4` varchar(128) NOT NULL,
  `correct` varchar(64) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `questions`
--

INSERT INTO `questions` (`id`, `question`, `theme`, `option1`, `option2`, `option3`, `option4`, `correct`) VALUES
(1, 'print() - функция вывода информации на экран. Как переводится слово print на русский язык?', 'Вывод данных', 'вывести', 'печатать', 'отобразить', 'показать', 'печатать'),
(2, 'Какими символами необходимо выделять текст при выводе?', 'Вывод данных', 'звездочки', 'точки', 'решетки', 'кавычки', 'кавычки'),
(3, 'Как называется процесс умножение строки на число?', 'Вывод данных', 'дублирование', 'мультиплицирование', 'конкатенация', 'возведение', 'дублирование'),
(4, 'Как называется склеивание строк?', 'Вывод данных', 'сложение', 'приклеивание', 'конкатенация', 'дублирование', 'конкатенация'),
(5, 'В программе определена переменная name, которая равняется строке «Илья». Что выведет на экран print(«name»), где название переменной name выделено с двух сторон кавычками?', 'Вывод данных', 'Илья', 'name', 'произойдет ошибка', 'ничего', 'name'),
(6, 'Может ли Python вывести в функции print() решение арифметического выражения?', 'Вывод данных', 'да', 'нет', 'выведет само выражение', 'произойдет ошибка', 'да'),
(7, 'Куда необходимо записывать данные от input()?', 'Ввод данных', 'функция', 'переменная', 'память', 'модуль', 'переменная'),
(8, 'Какой тип данных возвращает input()?', 'Ввод данных', 'целое число', 'текст', 'строка', 'цифровой', 'строка'),
(9, 'В какой тип данных переводит функция int()?', 'Ввод данных', 'число', 'строка', 'дробь', 'словарь', 'число'),
(10, 'Что обычно пишут в аргументе функции input()?', 'Ввод данных', 'пример', 'результат', 'вопрос', 'ответ', 'вопрос'),
(11, 'В какой тип данных переводит функция {str()}{Эстээр}?', 'Ввод данных', 'целое число', 'строка', 'дробное число', 'список', 'строка'),
(12, 'Можно ли перевести введенную строку через input() в тип данных «целое число», если в ней присутствуют буквы или специальные символы?', 'Ввод данных', 'да, ненужные символы сами исчезнут', 'нельзя', 'можно, если содержатся буквы', 'можно, если содержатся специальные символы', 'нельзя'),
(13, 'С какого устройства происходит ввод данных в input()?', 'Ввод данных', 'микрофон', 'сканер', 'клавиатура', 'мышь', 'клавиатура'),
(14, 'Какую строку напечатает пустой вызов функции print()?', 'Вывод данных', 'случайную', 'произойдет ошибка', 'пустую', 'ничего не напечатает', 'пустую'),
(15, 'На каком языке пишутся названия перем`енных?', 'Переменные', 'русский', 'английский', 'французский', 'немецкий', 'английский'),
(16, 'С каких символов не должны начинаться названия перем`енных?', 'Переменные', 'буквы', 'нижнее подчеркивание', 'цифры', 'нет ограничений', 'цифры'),
(17, 'Можно ли переприсв`оить значение перем`енной?', 'Переменные', 'можно', 'нельзя', 'произойдет ошибка', 'да, но программа будет работать некорректно', 'можно'),
(18, 'Чем обозначается оператор присв`аивания?', 'Переменные', 'двоеточие', 'равно', 'звездочка', 'решетка', 'равно'),
(19, 'В какой памяти хранятся перем`енные?', 'Переменные', 'оперативная', 'постоянная', 'жесткий диск', 'твердотельная', 'оперативная'),
(20, 'Можно ли создать несколько переменных с одинаковыми значениями?', 'Переменные', 'можно', 'нельзя', 'произойдет ошибка', 'да, но программа будет работать некорректно', 'можно'),
(21, 'Можно ли объявить несколько переменных с одинаковыми названиями?', 'Переменные', 'можно', 'нельзя', 'произойдет ошибка', 'да, но программа будет работать некорректно', 'нельзя'),
(22, 'Чем отделяется целая часть от дробной в типе данных чисел ^fl`oat^?', 'Типы данных', 'запятая', 'двоеточие', 'звездочка', 'точка', 'точка'),
(23, 'Правда ли, что тип данных ^int^ обозначает целые числа?\n', 'Типы данных', 'нет', 'верно', 'такого типа данных не существует', 'это дроби', 'верно'),
(24, 'Какими символами необходимо выделять строки?', 'Типы данных', 'звездочки', 'точки', 'решетки', 'кавычки', 'кавычки'),
(25, '^string^ — это какой тип данных?', 'Типы данных', 'текст', 'число', 'строка', 'список', 'строка'),
(26, '^list^ — это какой тип данных?', 'Типы данных', 'текст', 'число', 'строка', 'список', 'список'),
(27, '^set^ — это какой тип данных?', 'Типы данных', 'множество', 'словарь', 'список', 'число', 'множество'),
(28, '^dict^ — это какой тип данных?', 'Типы данных', 'множество', 'словарь', 'список', 'число', 'словарь'),
(29, 'Что означает «^True^»?', 'Условный оператор', 'истина', 'ложь', 'условный оператор', 'утверждение', 'истина'),
(30, 'Что означает «^False^?»', 'Условный оператор', 'истина', 'ложь', 'условный оператор', 'утверждение', 'ложь'),
(31, '^Выраж`ение^, которое может быть истинным (^True^) или ложным (^False^) — это?\n', 'Условный оператор', 'подтверждение', 'утверждение', 'обсуждение', 'условный оператор', 'утверждение'),
(32, 'Оператор сравнения равенства обозначается каким равно?', 'Условный оператор', 'одиночное', 'двойное', 'тройное', 'нулевое', 'двойное'),
(33, 'Что обозначает {«If»}{^`иф^} в переводе с английского?', 'Условный оператор', 'если', 'иначе', 'то', 'потому', 'если'),
(34, 'Что обозначает «^else^» в переводе с английского языка?', 'Условный оператор', 'если', 'иначе', 'то', 'потому', 'иначе'),
(35, 'Сколько пробелов необходимо для отступа?', 'Условный оператор', 'два', 'три', 'четыре', 'пять', 'четыре'),
(36, 'Наличие чего подразумевает собой цикл {«while»}{`вайл}?', 'Циклы', 'диапазон', 'условие', 'функция', 'параметр', 'условие'),
(37, 'Наличие чего подразумевает собой цикл «^for^»?:', 'Циклы', 'диапазон', 'условие', 'функция', 'параметр', 'параметр'),
(38, 'Для чего в списках используется метод {.append()}{апп`энд}?', 'Циклы', 'удаление', 'создание', 'добавление', 'изменение', 'добавление'),
(39, 'Для чего в списках используется метод {.remove()}{рем`ув}?', 'Циклы', 'удаление', 'создание', 'добавление', 'изменение', 'удаление'),
(40, 'Что позволяет создать функция {range()}{р`эйндж}?', 'Циклы', 'условие', 'функция', 'параметр', 'диапазон', 'диапазон'),
(41, 'Сколько всего видов циклов в Python?', 'Циклы', 'один', 'два', 'три', 'четыре', 'два'),
(42, 'Можно ли перебрать список с помощью цикла «^for^»?', 'Циклы', 'можно', 'нельзя', 'только циклом «while»', 'список не является последовательностью элементов', 'можно'),
(43, 'Что означает оператор {«return»}{рет`ёрн}?', 'Функции', 'добавить', 'вернуть', 'взять', 'перевести', 'вернуть'),
(44, 'Возвращает ли функция print() значение?', 'Функции', 'да', 'нет', 'в зависимости от случая', 'только с использованием переменной', 'нет'),
(45, 'Возвращает ли функция input() значение?', 'Функции', 'да', 'нет', 'в зависимости от случая', 'только с использованием переменной', 'да'),
(46, 'Можно ли сохранить результат возвращающей функции в переменную?', 'Функции', 'можно', 'нельзя', 'в зависимости от случая', 'только с использованием input()', 'можно'),
(47, 'Возвращает ли функция {str()}{^эстэ`эр^} значение?', 'Функции', 'да', 'нет', 'в зависимости от случая', 'только с использованием переменной', 'да'),
(48, 'Верно ли, что функция, которая определена без оператора {«return»}{рет`ёрн}, возвращает «None»?', 'Функции', 'верно', 'неверно', 'в зависимости от случая', 'только с использованием переменной', 'верно'),
(49, 'Вставьте пропущенное слово в определении.\n«Функция — это {«…»}{^, пропущенное слово^,} названный каким-либо именем»?', 'Функции', 'код', 'объект', 'оператор', 'алгоритм', 'алгоритм');

-- --------------------------------------------------------

--
-- Структура таблицы `themes`
--

CREATE TABLE `themes` (
  `id` int(11) NOT NULL,
  `theme` varchar(64) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `themes`
--

INSERT INTO `themes` (`id`, `theme`) VALUES
(3, 'Ввод данных'),
(1, 'Вывод данных'),
(4, 'Переменные'),
(2, 'Типы данных'),
(5, 'Условный оператор'),
(7, 'Функции'),
(6, 'Циклы');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `questions`
--
ALTER TABLE `questions`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `themes`
--
ALTER TABLE `themes`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `theme` (`theme`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;
--
-- AUTO_INCREMENT для таблицы `questions`
--
ALTER TABLE `questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=50;
--
-- AUTO_INCREMENT для таблицы `themes`
--
ALTER TABLE `themes`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
